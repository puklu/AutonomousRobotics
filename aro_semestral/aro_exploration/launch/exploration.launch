<launch>
    <!--
        IMPORTANT: Configure your nodes for evaluation within this launch file.
    -->
    <arg name="robot_radius" default="$(eval 0.4)"/>
    <arg name="robot_diameter" value="$(eval 2 * robot_radius)"/>
    <arg name="robot_frame" default="base_footprint"/>

    <arg name="odom" default="true"/>
    <arg name="odom_frame" default="$(eval 'odom' if odom else robot_frame)"/>
    <arg name="alignment" default="frame_to_frame"/>
    <arg name="descriptor" default="position"/>
    <arg name="loss" default="point_to_point"/>

    <arg name="control_config_name" default="control.yaml"/>
    <arg name="cmd_vel_topic" default="cmd_vel"
         doc="Use 'cmd_vel' in the simulator and '/cmd_vel_mux/safety_controller' with the real robot."/>

    <!-- Expand aro_slam.launch for more direct control over the parameters. -->
    <include file="$(find aro_slam)/launch/scan_to_cloud.launch" pass_all_args="true">
        <arg name="fixed_frame" value="$(arg odom_frame)"/>
    </include>
    <include file="$(find aro_slam)/launch/cloud_filter.launch" pass_all_args="true"/>
    <node if="$(arg odom)" name="odom_to_tf" pkg="aro_slam" type="odom_to_tf" output="screen">
        <remap from="odom" to="odom"/>
        <remap from="/tf" to="/tf"/>
    </node>
    <node name="icp_slam" pkg="aro_slam" type="icp_slam"
          output="screen">
        <rosparam subst_value="true">
            <!-- alignment from {frame_to_frame, frame_to_map} -->
            alignment: $(arg alignment)
            odom_frame: $(arg odom_frame)
            map_frame: map
            max_age: 0.5
            timeout: 0.5
            always_publish_tf: true
            <!-- loss from {point_to_point, point_to_plane} -->
            loss: $(arg loss)
            <!-- descriptor from {position, position_and_normal} -->
            descriptor: $(arg descriptor)
            max_iters: 100

            inlier_ratio: 0.65
            inlier_dist_mult: 2.0
            max_inlier_dist: 0.5

            localized_inlier_ratio: 0.5
            localized_inlier_dist: 0.1
            mapping_inlier_ratio: 0.8
            mapping_min_dist: 0.1
        </rosparam>
        <remap from="cloud" to="cloud/smooth"/>
        <remap from="registered" to="registered"/>
        <remap from="inliers" to="inliers"/>
        <remap from="reference" to="reference"/>
    </node>
    <include file="$(find aro_slam)/launch/occupancy_mapper.launch" pass_all_args="true"/>
    <!-- Add TF metrics if ground truth is available, e.g., in simulator. -->
    <include file="$(find aro_slam)/launch/tf_metrics.launch"/>

    <node name="frontiers" pkg="aro_frontier" type="frontier.py" output="screen">
        <rosparam subst_value="true">
            map_frame: map
            robot_frame: $(arg robot_frame)
            robot_diameter: $(arg robot_diameter)
            occupancy_threshold: 90
        </rosparam>
        <remap from="occupancy" to="occupancy"/>
    </node>

    <node name="planner" pkg="aro_planning" type="planner.py" output="screen">
        <rosparam subst_value="true">
            map_frame: map
            robot_frame: $(arg robot_frame)
            robot_diameter: $(arg robot_diameter)
            occupancy_threshold: 90
        </rosparam>
        <remap from="occupancy" to="occupancy"/>
    </node>

    <node name="explorer" pkg="aro_exploration" type="explorer.py" output="screen">
        <rosparam subst_value="true">
            robot_frame: $(arg robot_frame)
            map_frame: map
            <!-- some parameters you might (not) need -->
            plan_interval: 20.0
            goal_reached_dist: $(arg robot_radius)
            retries: 10
        </rosparam>
    </node>

    <node name="path_follower" pkg="aro_control" type="path_follower.py" output="screen">
        <rosparam subst_value="true">
            map_frame: map
            odom_frame: odom
            robot_frame: $(arg robot_frame)
        </rosparam>

        <!-- loading of config files -->
        <rosparam file="$(find aro_control)/config/$(arg control_config_name)" />

        <remap from="path" to="path"/>
        <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/>
    </node>
</launch>
